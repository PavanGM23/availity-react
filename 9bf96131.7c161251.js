(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{132:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return r})),n.d(t,"toc",(function(){return b})),n.d(t,"default",(function(){return d}));var a=n(3),l=n(7),o=(n(0),n(174)),i=["components"],c={title:"Getting Started"},r={unversionedId:"components/table/index",id:"components/table/index",isDocsHomePage:!1,title:"Getting Started",description:"This is a generic table component that wraps react-table.",source:"@site/docs/components/table/index.md",slug:"/components/table/index",permalink:"/availity-react/components/table/index",editUrl:"https://github.com/availity/availity-react/edit/master/docusaurus/docs/components/table/index.md",version:"current",sidebar:"someSidebar",previous:{title:"<WizardStep />",permalink:"/availity-react/components/step-wizard/wizard-step"},next:{title:"<ScrollableContainer/>",permalink:"/availity-react/components/table/scrollableContainer"}},b=[{value:"Installation",id:"installation",children:[]},{value:"Simple Example",id:"simple-example",children:[]},{value:"TableProvider",id:"tableprovider",children:[{value:"Table Provider Props",id:"table-provider-props",children:[]},{value:"useTableContext hook",id:"usetablecontext-hook",children:[]}]},{value:"Table Props",id:"table-props",children:[]},{value:"Formatting Cells",id:"formatting-cells",children:[{value:"Action Cell",id:"action-cell",children:[]},{value:"Badge Cell",id:"badge-cell",children:[]},{value:"Currency Cell",id:"currency-cell",children:[]},{value:"Date Cell",id:"date-cell",children:[]},{value:"Icon Cell",id:"icon-cell",children:[]}]},{value:"Column Configuration Properties",id:"column-configuration-properties",children:[]},{value:"Styling the Table",id:"styling-the-table",children:[{value:"SASS variables",id:"sass-variables",children:[]},{value:"Sticky Headers and Sticky Columns",id:"sticky-headers-and-sticky-columns",children:[]}]}],s={toc:b};function d(e){var t=e.components,n=Object(l.a)(e,i);return Object(o.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This is a generic table component that wraps react-table.\nSee ",Object(o.b)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/overview"},"react-table documentation"),"."),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/table"},Object(o.b)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/table.svg?style=for-the-badge",alt:"Version"}))),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-bash"},"npx install-peerdeps @availity/table --save\n")),Object(o.b)("h2",{id:"simple-example"},"Simple Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport Table, { TableProvider } from '@availity/table';\nimport '@availity/table/style.scss';\n\nconst columns = [\n  {\n    Header: 'Column 1',\n    accessor: 'column1',\n  },\n  {\n    Header: 'Column 2',\n    accessor: 'column2',\n  },\n  {\n    Header: 'Column 3',\n    accessor: 'column3',\n  },\n];\n\nconst Example = () => (\n    <TableProvider\n        columns={columns}\n        data={data}>\n        <Table/>\n    </TableProvider>\n);\n")),Object(o.b)("h2",{id:"tableprovider"},"TableProvider"),Object(o.b)("h3",{id:"table-provider-props"},"Table Provider Props"),Object(o.b)("p",null,"This extends the ",Object(o.b)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/api/useTable#table-options"},"react-table TableOptions"),".\nYou can supply any properties listed on the documentation here and have the table respect it."),Object(o.b)("h4",{id:"id-string"},Object(o.b)("inlineCode",{parentName:"h4"},"id?: string")),Object(o.b)("p",null,"This is a unique id that is prepended to the table and nested table elements."),Object(o.b)("h4",{id:"columns-column"},Object(o.b)("inlineCode",{parentName:"h4"},"columns: Column[]")),Object(o.b)("p",null,"This is an array of column definitions based off of ",Object(o.b)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/api/useTable#column-options"},"react-table Column"),"."),Object(o.b)("h4",{id:"data-object"},Object(o.b)("inlineCode",{parentName:"h4"},"data: object[]")),Object(o.b)("p",null,"This property holds the data for the table."),Object(o.b)("h4",{id:"selectable-boolean"},Object(o.b)("inlineCode",{parentName:"h4"},"selectable?: boolean")),Object(o.b)("p",null,"This determines whether the table is selectable or not. If it is set to true, then the first column of the table will be a checkbox column that will toggle selecting and deselecting the row."),Object(o.b)("h4",{id:"sortable-boolean"},Object(o.b)("inlineCode",{parentName:"h4"},"sortable?: boolean")),Object(o.b)("p",null,"This determines whether the table is sortable or not."),Object(o.b)("h4",{id:"initialstate-object"},Object(o.b)("inlineCode",{parentName:"h4"},"initialState?: object")),Object(o.b)("p",null,"This object definition sets the initial state of the table, including the default sort by definition."),Object(o.b)("h4",{id:"additionalcontent-reactnode"},Object(o.b)("inlineCode",{parentName:"h4"},"additionalContent?: ReactNode")),Object(o.b)("p",null,"This designates a Component that will be displayed in the table row for the record. This content displays in an additional ",Object(o.b)("inlineCode",{parentName:"p"},"<tr>")," with a colspan equal to the number of columns that are NOT sticky."),Object(o.b)("h3",{id:"usetablecontext-hook"},"useTableContext hook"),Object(o.b)("p",null,"Wrapping the table and any other components with the TableProvider will provide access to those child components to the TableContext, which holds all of the instance data created by the useTable hook from react-table alongside any other provided parameters."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"import { useTableContext } from './TableContext';\n...\nconst { \n    scrollable,\n    AdditionalContent,\n    toggleSelectAll\n    toggleSortBy, \n    sortBy, \n    sortByOptions,\n    selectable, \n    instance \n} = useTableContext();\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"instance")," property is tied directly to the ",Object(o.b)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/api/useTable#instance-properties"},"react-table Table Instance"),". Refer to the documentation for details on what data is provided there."),Object(o.b)("h2",{id:"table-props"},"Table Props"),Object(o.b)("h4",{id:"scrollable-boolean"},Object(o.b)("inlineCode",{parentName:"h4"},"scrollable?: boolean")),Object(o.b)("p",null,"This property is automatically set when it is wrapped in a scrollable container. This will apply fixed column widths to force it to scroll rather than minify the columns to fit in a set container."),Object(o.b)("h4",{id:"bodypropsobject"},Object(o.b)("inlineCode",{parentName:"h4"},"bodyProps?:object")),Object(o.b)("p",null,"Any DOM properties that should be passed onto the ",Object(o.b)("inlineCode",{parentName:"p"},"<tbody>")," element."),Object(o.b)("h4",{id:"cellprops-object"},Object(o.b)("inlineCode",{parentName:"h4"},"cellProps?: object")),Object(o.b)("p",null,"Any DOM properties that should be passed onto the ",Object(o.b)("inlineCode",{parentName:"p"},"<td>")," elements."),Object(o.b)("h4",{id:"headerprops-object"},Object(o.b)("inlineCode",{parentName:"h4"},"headerProps?: object")),Object(o.b)("p",null,"Any DOM properties that should be passed onto the ",Object(o.b)("inlineCode",{parentName:"p"},"<thead>")," element."),Object(o.b)("h4",{id:"rowprops-object"},Object(o.b)("inlineCode",{parentName:"h4"},"rowProps?: object")),Object(o.b)("p",null,"Any DOM properties that should be passed onto the ",Object(o.b)("inlineCode",{parentName:"p"},"<tr>")," element."),Object(o.b)("h4",{id:"onrowclick-event-ontableclickevent--void"},Object(o.b)("inlineCode",{parentName:"h4"},"onRowClick?: (event: OnTableClickEvent) => void")),Object(o.b)("h5",{id:"ontableclickevent-props"},"OnTableClickEvent Props"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"instance: Row")," The react-table ",Object(o.b)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/api/useTable#row-properties"},"Row")," instance that was clicked."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"data: object")),Object(o.b)("p",null,"This record that was clicked."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"index: number")),Object(o.b)("p",null,"The index of the row that was clicked."),Object(o.b)("h4",{id:"onrowselected-event-onrowselectedevent--void"},Object(o.b)("inlineCode",{parentName:"h4"},"onRowSelected?: (event: OnRowSelectedEvent) => void")),Object(o.b)("p",null,"Event handler for when a row is selected."),Object(o.b)("h5",{id:"onrowselectedevent-props"},"OnRowSelectedEvent Props"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"selectedRows: string[] | number[]")),Object(o.b)("p",null,"The ids of the records that are selected."),Object(o.b)("h4",{id:"onsort-sortby-tablesort--void"},Object(o.b)("inlineCode",{parentName:"h4"},"onSort?: (sortBy: TableSort) => void")),Object(o.b)("p",null,"Event handler that is called when data is sorted. "),Object(o.b)("h5",{id:"tablesort-props"},"TableSort props"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"id: string")),Object(o.b)("p",null,"The id, or the name of property on the object, that should be used to sort the data."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"desc: boolean")),Object(o.b)("p",null,"If true, the data should sort descending. If false, the data should sort ascending. "),Object(o.b)("h2",{id:"formatting-cells"},"Formatting Cells"),Object(o.b)("h3",{id:"action-cell"},"Action Cell"),Object(o.b)("p",null,"This is used to display an action menu in a cell."),Object(o.b)("h4",{id:"isvisible-record-t--boolean"},Object(o.b)("inlineCode",{parentName:"h4"},"isVisible?"),": (record?: T) => boolean"),Object(o.b)("p",null,"This is an optional function that can be used to conditionally display an action. The record will be passed into the function so that, if needed, the properties on the record can determine if the action is visible or not. If this properties are not populated, the action will always display."),Object(o.b)("h4",{id:"onclick-record-t--action"},Object(o.b)("inlineCode",{parentName:"h4"},"onClick?"),": (record?: T) => action"),Object(o.b)("p",null,"This is the onClick event handler for the action."),Object(o.b)("h4",{id:"example"},"Example"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"const columns = [\n  {\n    id: 'actions',\n    Header: 'Actions',\n    Cell: ActionCell({\n      actions: [\n        {\n          id: 'action1',\n          displayText: 'Action 1',\n          isVisible: (record: MyRecordType) => {\n              return record.hasAction1;\n          },\n          onClick: (record) => {\n            console.log(`action on record ${record.id}`);\n          },\n        },\n        {\n          id: 'action2',\n          displayText: 'Action 2',\n          isVisible: (record: MyRecordType) => {\n            return !record.hasAction1;\n          },\n          onClick: (record) => {\n            console.log(`action on record ${record.id}`);\n          },\n        },\n      ],\n    }),\n  },\n];\n")),Object(o.b)("h3",{id:"badge-cell"},"Badge Cell"),Object(o.b)("p",null,"This is used to display a Reactstrap Badge in a cell. See ",Object(o.b)("a",{parentName:"p",href:"https://availity.github.io/availity-uikit/v3/components#Badges-Contextual-Variations"},"Availity UI Kit")," and ",Object(o.b)("a",{parentName:"p",href:"https://reactstrap.github.io/components/badge/"},"ReactStrap")," for available stylings."),Object(o.b)("h4",{id:"usages"},"Usages"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"const columns = [\n  {\n    Header: 'Badge',\n    accessor: 'badge',\n    Cell: ({ row: { original } }) =>\n      original ? BadgeCell('success', original.badgeValue) : null,\n  },\n];\n\nconst columns = [\n  {\n    Header: 'Badge',\n    accessor: 'badge',\n    Cell: Badgecell('success'),\n  },\n];\n")),Object(o.b)("h3",{id:"currency-cell"},"Currency Cell"),Object(o.b)("p",null,"This is used to format currency in a cell. You can optionally pass it a default value to display if the value is null."),Object(o.b)("h4",{id:"usages-1"},"Usages"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"const columns = [\n  {\n    Header: 'Currency',\n    accessor: 'currency',\n    Cell: CurrencyCell({ defaultValue: '$0.00' }),\n  },\n];\n")),Object(o.b)("h4",{id:"props"},"Props"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"currency")),Object(o.b)("p",null,"Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"USD"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"defaultValue")),Object(o.b)("p",null,"The value that should display if the value of the currency property is not defined. Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"''"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"locales")),Object(o.b)("p",null,"The locale of the currency. Defaults to ",Object(o.b)("inlineCode",{parentName:"p"},"en-us"),"."),Object(o.b)("h3",{id:"date-cell"},"Date Cell"),Object(o.b)("p",null,"This is used to format a date in a cell by passing in a date format."),Object(o.b)("h4",{id:"usages-2"},"Usages"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"const columns = [\n  {\n    Header: 'Service Date',\n    accessor: 'serviceDate',\n    Cell: DateCell({ dateFormat: 'MM/DD/yyyy' }),\n  },\n];\n")),Object(o.b)("h3",{id:"icon-cell"},"Icon Cell"),Object(o.b)("p",null,"This is used to have an cell display an icon. This will only show the icon if the value for the cell is populated (or ",Object(o.b)("inlineCode",{parentName:"p"},"true"),").\nIn order to show an icon always and not conditionally you can utilize ",Object(o.b)("inlineCode",{parentName:"p"},"BuildIcon")," and supply it the name of the icon and title."),Object(o.b)("p",null,"See ",Object(o.b)("a",{parentName:"p",href:"https://availity.github.io/availity-uikit/v3/icons"},"Availity UI Kit")," for available icons."),Object(o.b)("h4",{id:"usages-3"},"Usages"),Object(o.b)("p",null,"To always display an icon, you can configure the column to just pass in the @availity/Icon component.\nIn the body of the table, the icon is displayed if the hasNotes property is set to true."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"    const columns = [\n            {\n                Header: <Icon name='doc-alt' title='Has Notes'/>),\n                accessor: 'hasNotes',\n                Cell: IconCell({ name: 'doc-alt', title: 'View Notes' }),\n            }\n    ]\n")),Object(o.b)("p",null,"If the title (tooltip) of the icon is dependent on the data of the record, it is possible to pass a function to the IconCell (as ",Object(o.b)("inlineCode",{parentName:"p"},"getTitle"),") to populate the record."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"    const columns = [\n            {\n                Header: <Icon name='flag' title='Flag for follup'/>,\n                accessor: 'followup',\n                Cell: IconCell({ name: 'flag', getTitle: (value: { username: string; }) => `Assigned To ${value.username}`}),\n            }\n    ]\n")),Object(o.b)("h2",{id:"column-configuration-properties"},"Column Configuration Properties"),Object(o.b)("p",null,"To see a comprehensive list of available properties for column configuration, view the ",Object(o.b)("a",{parentName:"p",href:"https://react-table.tanstack.com/docs/api/useTable#column-options"},"react-table documentation"),"."),Object(o.b)("p",null,"The following properties are some key ones to get going:"),Object(o.b)("h4",{id:"header"},Object(o.b)("inlineCode",{parentName:"h4"},"Header")),Object(o.b)("p",null,"This is the table header. You can either provider a string or function."),Object(o.b)("p",null,"Display a header as a static string:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"\n  const columns = [\n        {\n            Header: 'My Column',\n            ...\n        }\n    ]\n")),Object(o.b)("p",null,"Display a formatted header, such as an Icon."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},'  const columns = [\n        {\n            Header: <Icon name="phone" title="phone/>,\n            ...\n        }\n    ]\n')),Object(o.b)("h4",{id:"accessor"},Object(o.b)("inlineCode",{parentName:"h4"},"accessor")),Object(o.b)("p",null,"This is the property name from the record."),Object(o.b)("h4",{id:"cell"},Object(o.b)("inlineCode",{parentName:"h4"},"Cell")),Object(o.b)("p",null,"This is key for customizing how the data is presented in the cell."),Object(o.b)("h4",{id:"disablesortby"},Object(o.b)("inlineCode",{parentName:"h4"},"disableSortBy")),Object(o.b)("p",null,"When inside a sortable table, this designates that the column is not sortable."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@availity/table")," extends the react-table with some additional properties as follows."),Object(o.b)("h4",{id:"stickyleft"},Object(o.b)("inlineCode",{parentName:"h4"},"stickyLeft")),Object(o.b)("p",null,"This makes the column sticky to the left side of the table. This works best when inside a scrollable container. Not supported in IE11."),Object(o.b)("h4",{id:"stickyright"},Object(o.b)("inlineCode",{parentName:"h4"},"stickyRight")),Object(o.b)("p",null,"This makes the column sticky to the right side of the table. This works best when inside scrollable container. Not supported in IE11."),Object(o.b)("h4",{id:"disableclick"},Object(o.b)("inlineCode",{parentName:"h4"},"disableClick")),Object(o.b)("p",null,"When there is an on OnRowClick event populated, this designates that the column should not be clickable and not call that event. This is helpful for actions columns or cells that contain links or special functions."),Object(o.b)("h4",{id:"hidden"},Object(o.b)("inlineCode",{parentName:"h4"},"hidden")),Object(o.b)("p",null,"When this is true, the column will be hidden in the table."),Object(o.b)("h2",{id:"styling-the-table"},"Styling the Table"),Object(o.b)("p",null,"In order to get the out-of-the-box styles for the table you can import the table scss file. You can also supply classNames to ",Object(o.b)("inlineCode",{parentName:"p"},"bodyProps"),", ",Object(o.b)("inlineCode",{parentName:"p"},"cellProps"),", ",Object(o.b)("inlineCode",{parentName:"p"},"headerProps"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"rowProps"),"."),Object(o.b)("h3",{id:"sass-variables"},"SASS variables"),Object(o.b)("p",null,"Custom styling the table can be accomplished by setting the SASS variables prior to importing the scss file:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-scss"},"$av-table-header-background-color: #3e6887;\n$av-table-header-text-color: #ffffff;\n$av-table-header-cell-hover-color: #365b77;\n$av-table-selected-background-color: #ccdee2;\n$av-table-sort-icon-color: #fff;\n$av-table-font-size: 12px;\n$av-table-selected-background-color: #ccdee2;\n\n@import '~@availity/table/styles.scss';\n")),Object(o.b)("p",null,"The following are the available variables to utilize."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"$av-table-background-color: #f2f2f2 !default;\n$av-table-even-background-color: #ffffff !default;\n$av-table-odd-background-color: #f2f2f2 !default;\n$av-table-selected-background-color: #ecf0f3 !default;\n\n$av-table-header-background-color: #ffffff !default;\n$av-table-header-text-color: #000 !default;\n$av-table-header-cell-hover-color: #f2f2f2 !default;\n$av-table-header-height: 36px !default;\n$av-table-scrollable-height: 69vh !default;\n$av-table-scrollable-max-height: 100vh !default;\n\n$av-table-fixed-text-column-width: 160px !default;\n$av-table-fixed-icon-column-width: 27px !default;\n$av-table-fixed-selection-column-width: 50px !default;\n$av-table-action-column-width: 50px !default;\n\n$av-table-border-color: #ddd !default;\n$av-table-action-menu-color: #333 !default;\n$av-table-sort-icon-color: #000 !default;\n$av-table-font-size: 1rem !default;\n\n$av-table-additional-content-background-color: #fff !default;\n")),Object(o.b)("h3",{id:"sticky-headers-and-sticky-columns"},"Sticky Headers and Sticky Columns"),Object(o.b)("p",null,"You can configure the table header to be sticky by setting the ",Object(o.b)("inlineCode",{parentName:"p"},"headerProps.sticky")," property to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),".\nThis works best when the table is wrapped in a ",Object(o.b)("inlineCode",{parentName:"p"},"<ScrollableContainer/>"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"<Table\n  columns={columns}\n  records={records}\n  headerProps={{\n    sticky: true,\n  }}\n/>\n")),Object(o.b)("p",null,"You can also can configure a column to be sticky either left or right. This can be configured on in the column definitions for the table."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-jsx"},"const columns = [\n    {\n        id: 'actions',\n        stickyRight: true,\n        ...\n    }\n];\n\n")),Object(o.b)("p",null,"Note that this is not supported in IE 11."))}d.isMDXComponent=!0},174:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return u}));var a=n(0),l=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var b=l.a.createContext({}),s=function(e){var t=l.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return l.a.createElement(b.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},h=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,b=r(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,u=d["".concat(i,".").concat(h)]||d[h]||p[h]||o;return n?l.a.createElement(u,c(c({ref:t},b),{},{components:n})):l.a.createElement(u,c({ref:t},b))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var r in t)hasOwnProperty.call(t,r)&&(c[r]=t[r]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var b=2;b<o;b++)i[b]=n[b];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"}}]);